---
title: "Bayesian parametric models for survival prediction in medical applications"
subtitle: "Assessing overfitting"
date: "01-05-2023"
author:
  - name: Iwan Paolucci, PhD
    affiliation: "MD Anderson Cancer Center, Department of Interventional Radiology, Houston, TX, USA"
    orcid: 0000-0002-9393-3015
toc: true
format: pdf
editor: source
---

# Aim

The aim of this experiment is to compare the amount of overfitting between Bayesian parametric survival models from the pymc-survival package against CoxPH, Random Survival Forest (RSF) and DeepSurv models. 

***Significant overfitting*** is defined when all other models are below the 95% CI of the best performing model.

# Setup

```{r global-options, include=FALSE}
library(knitr)
npj.fig.width.1 <- 88 / 25.4
npj.fig.width.2 <- 180 / 25.4
knitr::opts_chunk$set(fig.width=npj.fig.width.2, fig.path='out/figs/overfit/', 
                      dpi = 300, dev=c("pdf", "png"), fig.align = 'center',
                      echo=TRUE, warning=FALSE, message=FALSE)
```

```{r setup, message=FALSE, warning=FALSE}
library(ggplot2)
library(ggpubr)
library(gtsummary)
library(dplyr)
library(gt)
library(rstanarm)
library(parameters)
library(stringr)
```

\newpage

# Load data

```{r load-data, include=FALSE, message=FALSE}
redownload <- TRUE

if (redownload) {
  src_folder <- 'U:/src/pymc-survival/paper/experiments/results'
  
  data.rsf <- rbind(read.csv(paste(src_folder, 'rsf_whas/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'rsf_gbcs/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'rsf_aids/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'rsf_veteran/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'rsf_pbc/results_overfit.csv', sep = '/'))) 
  
  data.cox <- rbind(read.csv(paste(src_folder, 'cox_whas/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'cox_gbcs/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'cox_aids/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'cox_veteran/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'cox_pbc/results_overfit.csv', sep = '/'))) 
  
  data.exp <- rbind(read.csv(paste(src_folder, 'exp_whas/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'exp_gbcs/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'exp_aids/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'exp_veteran/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'exp_pbc/results_overfit.csv', sep = '/')))
  # 
  # data.wb <- rbind(read.csv(paste(src_folder, 'pm_wb_gbcs/results_overfit.csv', sep = '/')), 
  #                  read.csv(paste(src_folder, 'pm_wb_whas/results_overfit.csv', sep = '/')),
  #                  read.csv(paste(src_folder, 'pm_wb_aids/results_overfit.csv', sep = '/')),
  #                  read.csv(paste(src_folder, 'pm_wb_veteran/results_overfit.csv', sep = '/')),
  #                  read.csv(paste(src_folder, 'pm_wb_pbc/results_overfit.csv', sep = '/')))
  # 
  # data.nnwb <- rbind(read.csv(paste(src_folder, 'pm_nnwb_gbcs/results_overfit.csv', sep = '/')), 
  #                    read.csv(paste(src_folder, 'pm_nnwb_whas/results_overfit.csv', sep = '/')),
  #                   read.csv(paste(src_folder, 'pm_nnwb_aids/results_overfit.csv', sep = '/')),
  #                    read.csv(paste(src_folder, 'pm_nnwb_veteran/results_overfit.csv', sep = '/')),
  #                   read.csv(paste(src_folder, 'pm_nnwb_pbc/results_overfit.csv', sep = '/')))
  
  data.dps <- rbind(read.csv(paste(src_folder, 'deepsurv_gbcs/results_overfit.csv', sep = '/')), 
                     read.csv(paste(src_folder, 'deepsurv_whas/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'deepsurv_aids/results_overfit.csv', sep = '/')),
                     read.csv(paste(src_folder, 'deepsurv_veteran/results_overfit.csv', sep = '/')),
                    read.csv(paste(src_folder, 'deepsurv_pbc/results_overfit.csv', sep = '/')))
  
  data <- rbind(data.rsf, data.cox, data.dps, data.exp)
  
  write.csv(data, file = 'data/results_overfitting.csv', row.names = FALSE)
}
```

```{r load-data-2}
data.raw <- read.csv('data/results_overfitting.csv')
```

## Preprocess data

```{r}

data <- data.raw %>%
  mutate(experiment_name = experiment,
         experiment = str_sub(experiment_name, -3, -1),
         model = str_sub(experiment_name, 0, 4),
         experiment_lbl = factor(experiment, labels = c("ACTG", "GBCS", "PBC", "Veteran", "WHAS")),
         model_lbl = factor(model, labels = c("CoxPH", "DeepSurv", "PM Exp", "RSF"))) # 
  #        run_id = rep(seq(1, 100), times = nrow(.)/100)) %>%
  # filter(run_id <= 47)

```

```{r }
data %>%
  select(model_lbl, model, experiment_lbl, cindex_diff) %>%
  group_by(model_lbl, experiment_lbl) %>%
  summarise(
    n = n(),
    lbl = first(model),
  ) %>% as.data.frame() 
```


# Results

## Graphical

```{r overfit-all, fig.width=7, fig.asp=0.75}

ggboxplot(data = data, x = 'model_lbl', y = 'cindex_diff', fill = 'model_lbl', facet.by = 'experiment_lbl',
          ylab = 'C-Index', xlab = 'Model', palette = 'lancet') +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))


```


### Bayesian
```{r tbl-results-bayes}

custom_mean_ci_bayes <- function(data, variable, ...) {
  model <- stan_glm(cindex_diff ~ 1 , 
                  data = data ,
                  refresh = 0,
                  algorithm = 'sampling')
  
  model_hdi <- model_parameters(model, ci = 1-0.05/15) 
  
  dplyr::tibble(
    mean = model_hdi$Median[1],
    conf.low = model_hdi$CI_low[1],
    conf.high = model_hdi$CI_high[1]
  )
}

res.tbl <- data %>%
  select(model_lbl, experiment_lbl, cindex_diff) %>%
  tbl_strata(strata = experiment_lbl,  ~.x %>%
    tbl_custom_summary(by = 'model_lbl',
                type = list(
                  cindex_diff ~ 'continuous'),
                label = list(
                  cindex_diff ~ 'C-Index'),
                digits = everything() ~ 3,
                stat_fns = ~ custom_mean_ci_bayes,
                statistic = ~ "{mean} [{conf.low} - {conf.high}]"
                ) ,
    .combine_with = 'tbl_stack'
  ) %>%
  modify_footnote(
    update = all_stat_cols() ~ "Mean [95% CI]"
  )

res.tbl

res.tbl %>% as_gt() %>% gtsave(filename = 'out/results_overfitting_bayes.rtf')

```


## Test for equivalence


```{r fit-model}

comparisons <- data.frame('Model'=character(),
                          'Experiment'=character(),
                          'HDI_low'=double(),
                          'HDI_high'=double(),
                          'ROPE_percentage'=double(),
                          'ROPE_equivalence'=character())

for (idx_experiment in levels(data$experiment_lbl)){
  for (idx_model in levels(data$model_lbl)){
    model <- stan_glm(cindex_diff ~ 1 , 
                  data = data %>% 
                    filter(experiment_lbl == idx_experiment & model_lbl == idx_model),
                  refresh = 0,
                  algorithm = 'sampling')
    
    et <- equivalence_test(model, 
                 range = c(-0.05, +0.05),
                 ci = 1 - 0.05 / 15
                 )
    comparisons <- rbind(comparisons, data.frame(
      'Model'=idx_model,
      'Experiment'=idx_experiment,
      'HDI_mean'=signif(model$coefficients['(Intercept)'], digits = 2),
      'HDI_low'=signif(et$HDI_low, digits = 2),
      'HDI_high'=signif(et$HDI_high, digits = 2),
      'ROPE_percentage'=round(et$ROPE_Percentage * 100, 1),
      'ROPE_equivalence'=et$ROPE_Equivalence
    ))
  }
}

# comparisons %>% as_tibble()
# 
# comparisons$cindex <- sprintf("%0.4f [%0.4f - %0.4f]", comparisons$HDI_mean, comparisons$HDI_low, comparisons$HDI_high)
# 
# comparisons %>% gt() %>% gtsave(filename = 'out/results_overfit_compare.rtf')


```

```{r plt-equiv-test, fig.width=7, fig.asp=0.9}
ggscatter(data = comparisons, x = 'Model', y = 'HDI_mean',
          facet.by = 'Experiment',
          color = 'Model', palette = 'lancet', ylab = 'Decrease in C-Index') +
  geom_hline(yintercept = c(0.01), color = 'black', linetype = 'dashed') +
  geom_errorbar(data = comparisons,
                  aes(color = Model, ymin = HDI_low, ymax = HDI_high),
                  width = 0.25) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))


```