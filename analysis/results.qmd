---
title: "Bayesian parametric models for survival prediction in medical applications"
subtitle: "Comparison of algorithms"
date: "12-02-2022"
author:
  - name: Iwan Paolucci, PhD
    affiliation: "MD Anderson Cancer Center, Department of Interventional Radiology, Houston, TX, USA"
    orcid: 0000-0002-9393-3015
toc: true
format: pdf
editor: source
---

# Aim

The aim of this experiment is to compare Bayesian parametric survival models from the pymc-survival package against CoxPH, Random Survival Forest (RSF) and DeepSurv models. 

***Significant outperformance*** is defined when all other models are below the 95% CI of the best performing model.

# Setup

```{r setup, message=FALSE, warning=FALSE}
library(ggplot2)
library(ggpubr)
library(gtsummary)
library(dplyr)
library(gt)
library(rstanarm)
library(parameters)
```

\newpage

# Load data

```{r load-data, include=FALSE, message=FALSE}
redownload <- FALSE

if (redownload) {
  src_folder <- 'U:/src/pymc-survival/examples/experiments/results'
  
  data.rsf <- rbind(read.csv(paste(src_folder, 'rsf_whas/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'rsf_gbcs/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'rsf_aids/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'rsf_veteran/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'rsf_pbc/results.csv', sep = '/'))) 
  
  data.cox <- rbind(read.csv(paste(src_folder, 'cox_whas/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'cox_gbcs/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'cox_aids/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'cox_veteran/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'cox_pbc/results.csv', sep = '/'))) 
  
  data.exp <- rbind(read.csv(paste(src_folder, 'pm_exp_whas/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'pm_exp_gbcs/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'pm_exp_aids/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'pm_exp_veteran/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'pm_exp_pbc/results.csv', sep = '/')))
  
  data.wb <- rbind(read.csv(paste(src_folder, 'pm_wb_gbcs/results.csv', sep = '/')), 
                   read.csv(paste(src_folder, 'pm_wb_whas/results.csv', sep = '/')),
                   read.csv(paste(src_folder, 'pm_wb_aids/results.csv', sep = '/')),
                   read.csv(paste(src_folder, 'pm_wb_veteran/results.csv', sep = '/')),
                   read.csv(paste(src_folder, 'pm_wb_pbc/results.csv', sep = '/')))
  
  data.gp <- rbind(read.csv(paste(src_folder, 'gp_old/pm_gp_veteran/results.csv', sep = '/')),
                   read.csv(paste(src_folder, 'gp_old/pm_gp_gbcs/results.csv', sep = '/')),
                   read.csv(paste(src_folder, 'gp_old/pm_gp_whas/results.csv', sep = '/')),
                   read.csv(paste(src_folder, 'gp_old/pm_gp_aids/results.csv', sep = '/')),
                   read.csv(paste(src_folder, 'gp_old/pm_gp_pbc/results.csv', sep = '/')))
  
  data.nnwb <- rbind(read.csv(paste(src_folder, 'pm_nnwb_gbcs/results.csv', sep = '/')), 
                     read.csv(paste(src_folder, 'pm_nnwb_whas/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'pm_nnwb_aids/results.csv', sep = '/')),
                     read.csv(paste(src_folder, 'pm_nnwb_veteran/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'pm_nnwb_pbc/results.csv', sep = '/')))
  
  data.dps <- rbind(read.csv(paste(src_folder, 'deepsurv_gbcs/results.csv', sep = '/')), 
                     read.csv(paste(src_folder, 'deepsurv_whas/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'deepsurv_aids/results.csv', sep = '/')),
                     read.csv(paste(src_folder, 'deepsurv_veteran/results.csv', sep = '/')),
                    read.csv(paste(src_folder, 'deepsurv_pbc/results.csv', sep = '/')))
  
  data <- rbind(data.rsf, data.exp, data.cox, data.wb, data.dps, data.nnwb, data.gp)
  
  write.csv(data, file = 'data/results_comparison.csv', row.names = FALSE)
}
```

```{r load-data-2}
data.raw <- read.csv('data/results_comparison.csv')
```

## Preprocess data

```{r}

data <- data.raw %>%
  filter(model != 'pmsurv_gp') %>%
  mutate(experiment = ifelse(experiment == 'data/aids/', 'data/aids', experiment),
         experiment_lbl = factor(experiment, labels = c("ACTG", "GBCS", "PBC", "Veteran", "WHAS")),
         model_lbl = factor(model, labels = c("CoxPH", "DeepSurv", "PM Exp", "PM Wb","PM NN", "RSF")),
         run_id = rep(seq(1, 100), times = nrow(.)/100)) %>%
  filter(run_id <= 47)

```

```{r }
data %>%
  select(model_lbl, model, experiment_lbl, cindex) %>%
  group_by(model_lbl, experiment_lbl) %>%
  summarise(
    n = n(),
    lbl = first(model),
  ) %>% as.data.frame() 
```

\newpage

# Results

## Graphical

```{r comp-all, fig.width=7}

ggboxplot(data = data, x = 'model_lbl', y = 'cindex', fill = 'model_lbl', facet.by = 'experiment_lbl',
          ylab = 'C-Index', xlab = 'Model', palette = 'lancet') +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))


```

\newpage

## Tabular

```{r custom-stat-fun}

custom_mean_ci <- function(data, variable, ...) {
  mu <- mean(data[[variable]])
  margin <- qt(0.975, df=nrow(data) - 1) * sd(data[[variable]]) / sqrt(nrow(data))
  dplyr::tibble(
    mean = mu,
    conf.low = mu - margin,
    conf.high = mu + margin
  )
}

custom_median_ci <- function(data, variable, ...) {
  res <- wilcox.test(data$cindex, conf.int = TRUE)
  dplyr::tibble(
    mean = res$estimate,
    conf.low = res$conf.int[1],
    conf.high = res$conf.int[2]
  )
}


custom_mean_ci_bayes <- function(data, variable, ...) {
  model <- stan_glm(cindex ~ 1 , 
                  data = data ,
                  refresh = 0,
                  algorithm = 'sampling')
  
  model_hdi <- model_parameters(model, ci = 1-0.05/15) 
  
  dplyr::tibble(
    mean = model_hdi$Median[1],
    conf.low = model_hdi$CI_low[1],
    conf.high = model_hdi$CI_high[1]
  )
}


```

\newpage

### Bayesian
```{r tbl-results-bayes}

res.tbl <- data %>%
  select(model_lbl, experiment_lbl, cindex) %>%
  tbl_strata(strata = experiment_lbl,  ~.x %>%
    tbl_custom_summary(by = 'model_lbl',
                type = list(
                  cindex ~ 'continuous'),
                label = list(
                  cindex ~ 'C-Index'),
                digits = everything() ~ 3,
                stat_fns = ~ custom_mean_ci_bayes,
                statistic = ~ "{mean} [{conf.low} - {conf.high}]"
                ) ,
    .combine_with = 'tbl_stack'
  ) %>%
  modify_footnote(
    update = all_stat_cols() ~ "Mean [95% CI]"
  )

res.tbl

res.tbl %>% as_gt() %>% gtsave(filename = 'out/results_bayes.rtf')

```


```{r plt-equiv-test, fig.width=7, fig.asp=0.9}


comparisons <- data.frame('Model'=character(),
                          'Experiment'=character(),
                          'HDI_low'=double(),
                          'HDI_high'=double(),
                          'ROPE_percentage'=double(),
                          'ROPE_equivalence'=character())

for (idx_experiment in levels(data$experiment_lbl)){
  for (idx_model in levels(data$model_lbl)){
    model <- stan_glm(cindex_diff ~ 1 , 
                  data = data %>% 
                    filter(experiment_lbl == idx_experiment & model_lbl == idx_model),
                  refresh = 0,
                  algorithm = 'sampling')
    
    et <- equivalence_test(model, 
                 range = c(-0.05, +0.05),
                 ci = 1 - 0.05 / 15
                 )
    comparisons <- rbind(comparisons, data.frame(
      'Model'=idx_model,
      'Experiment'=idx_experiment,
      'HDI_mean'=signif(model$coefficients['(Intercept)'], digits = 2),
      'HDI_low'=signif(et$HDI_low, digits = 2),
      'HDI_high'=signif(et$HDI_high, digits = 2),
      'ROPE_percentage'=round(et$ROPE_Percentage * 100, 1),
      'ROPE_equivalence'=et$ROPE_Equivalence
    ))
  }
}

ggscatter(data = comparisons, x = 'Model', y = 'HDI_mean',
          facet.by = 'Experiment',
          color = 'Model', palette = 'lancet', ylab = 'C-Index') +
  geom_hline(yintercept = c(0.01), color = 'black', linetype = 'dashed') +
  geom_errorbar(data = comparisons,
                  aes(color = Model, ymin = HDI_low, ymax = HDI_high),
                  width = 0.25) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))


```

\newpage

### Frequentist

```{r tbl-results}

res.tbl <- data %>%
  select(model_lbl, experiment_lbl, cindex) %>%
  tbl_strata(strata = experiment_lbl,  ~.x %>%
    tbl_custom_summary(by = 'model_lbl',
                type = list(
                  cindex ~ 'continuous'),
                label = list(
                  cindex ~ 'C-Index'),
                digits = everything() ~ 3,
                stat_fns = ~ custom_mean_ci,
                statistic = ~ "{mean} [{conf.low} - {conf.high}]"
                ) ,
    .combine_with = 'tbl_stack'
  ) %>%
  modify_footnote(
    update = all_stat_cols() ~ "Mean [95% CI]"
  )

res.tbl

res.tbl %>% as_gt() %>% gtsave(filename = 'out/results.rtf')
```
# Diagnostics

## Check distributionof C-Indexes

Compute Shapiro test for C-index on each experiment/model combination.

```{r comp-shap-test}

data %>%
  group_by(model_lbl, experiment_lbl) %>%
  summarise(n = n(),
            shap_test = round(shapiro.test(cindex)$p.value, 3),
            is_normal = (shapiro.test(cindex)$p.value > 0.05)
            )

```

There are a few cases where the C-Indexes are not normally distributed. 
